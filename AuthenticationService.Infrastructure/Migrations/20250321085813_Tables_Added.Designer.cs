// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserService.Infrastructure;

#nullable disable

namespace UserService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250321085813_Tables_Added")]
    partial class Tables_Added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserService.Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_on")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Deleted_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Deleted_on")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Updated_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_on")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("UserService.Domain.Entities.Instructor", b =>
                {
                    b.Property<Guid>("Instructor_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Certificate_Url")
                        .HasColumnType("text");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_on")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Deleted_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Deleted_on")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Is_Blocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkedIn_Url")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Profile")
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<string>("Updated_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_on")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Instructor_Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("UserService.Domain.Entities.VerifyInstructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Certificate_Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Expire_time")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Otp")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VerifyInstructors");
                });

            modelBuilder.Entity("UserService.Domain.Entities.VerifyUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Expire_time")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Otp")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VerifyUsers");
                });

            modelBuilder.Entity("UserService.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_on")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Deleted_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Deleted_on")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Is_blocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Profile")
                        .HasColumnType("text");

                    b.Property<string>("Updated_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_on")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
